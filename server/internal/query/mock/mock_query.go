// Code generated by MockGen. DO NOT EDIT.
// Source: internal/query/query.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	query "github.com/ykode/srp_demo/server/internal/query"
	reflect "reflect"
)

// MockIdentityQuery is a mock of IdentityQuery interface
type MockIdentityQuery struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityQueryMockRecorder
}

// MockIdentityQueryMockRecorder is the mock recorder for MockIdentityQuery
type MockIdentityQueryMockRecorder struct {
	mock *MockIdentityQuery
}

// NewMockIdentityQuery creates a new mock instance
func NewMockIdentityQuery(ctrl *gomock.Controller) *MockIdentityQuery {
	mock := &MockIdentityQuery{ctrl: ctrl}
	mock.recorder = &MockIdentityQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIdentityQuery) EXPECT() *MockIdentityQueryMockRecorder {
	return m.recorder
}

// FindIdentityByUserName mocks base method
func (m *MockIdentityQuery) FindIdentityByUserName(username string) <-chan query.Result {
	ret := m.ctrl.Call(m, "FindIdentityByUserName", username)
	ret0, _ := ret[0].(<-chan query.Result)
	return ret0
}

// FindIdentityByUserName indicates an expected call of FindIdentityByUserName
func (mr *MockIdentityQueryMockRecorder) FindIdentityByUserName(username interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIdentityByUserName", reflect.TypeOf((*MockIdentityQuery)(nil).FindIdentityByUserName), username)
}

// MockSessionQuery is a mock of SessionQuery interface
type MockSessionQuery struct {
	ctrl     *gomock.Controller
	recorder *MockSessionQueryMockRecorder
}

// MockSessionQueryMockRecorder is the mock recorder for MockSessionQuery
type MockSessionQueryMockRecorder struct {
	mock *MockSessionQuery
}

// NewMockSessionQuery creates a new mock instance
func NewMockSessionQuery(ctrl *gomock.Controller) *MockSessionQuery {
	mock := &MockSessionQuery{ctrl: ctrl}
	mock.recorder = &MockSessionQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionQuery) EXPECT() *MockSessionQueryMockRecorder {
	return m.recorder
}

// FindSessionbyId mocks base method
func (m *MockSessionQuery) FindSessionbyId(sessionId uuid.UUID) <-chan query.Result {
	ret := m.ctrl.Call(m, "FindSessionbyId", sessionId)
	ret0, _ := ret[0].(<-chan query.Result)
	return ret0
}

// FindSessionbyId indicates an expected call of FindSessionbyId
func (mr *MockSessionQueryMockRecorder) FindSessionbyId(sessionId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSessionbyId", reflect.TypeOf((*MockSessionQuery)(nil).FindSessionbyId), sessionId)
}
