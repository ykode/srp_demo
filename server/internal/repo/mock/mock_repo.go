// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/repo.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/ykode/srp_demo/server/internal/domain"
	reflect "reflect"
)

// MockIdentityRepository is a mock of IdentityRepository interface
type MockIdentityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityRepositoryMockRecorder
}

// MockIdentityRepositoryMockRecorder is the mock recorder for MockIdentityRepository
type MockIdentityRepositoryMockRecorder struct {
	mock *MockIdentityRepository
}

// NewMockIdentityRepository creates a new mock instance
func NewMockIdentityRepository(ctrl *gomock.Controller) *MockIdentityRepository {
	mock := &MockIdentityRepository{ctrl: ctrl}
	mock.recorder = &MockIdentityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIdentityRepository) EXPECT() *MockIdentityRepositoryMockRecorder {
	return m.recorder
}

// SaveIdentity mocks base method
func (m *MockIdentityRepository) SaveIdentity(arg0 *domain.Identity) <-chan error {
	ret := m.ctrl.Call(m, "SaveIdentity", arg0)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// SaveIdentity indicates an expected call of SaveIdentity
func (mr *MockIdentityRepositoryMockRecorder) SaveIdentity(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveIdentity", reflect.TypeOf((*MockIdentityRepository)(nil).SaveIdentity), arg0)
}

// MockSessionRepository is a mock of SessionRepository interface
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// SaveSession mocks base method
func (m *MockSessionRepository) SaveSession(arg0 *domain.Session) <-chan error {
	ret := m.ctrl.Call(m, "SaveSession", arg0)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// SaveSession indicates an expected call of SaveSession
func (mr *MockSessionRepositoryMockRecorder) SaveSession(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSession", reflect.TypeOf((*MockSessionRepository)(nil).SaveSession), arg0)
}
