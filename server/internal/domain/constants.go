package domain

import (
	"crypto/hmac"
	"crypto/rand"
	"crypto/sha256"
	"math/big"
)

var (
	dhparam = []byte{
		0xBD, 0xE5, 0xC8, 0x29, 0xE8, 0xD1, 0xFE, 0x9D, 0xD8, 0x51, 0xB3, 0xE7,
		0xC6, 0x3B, 0xA3, 0x58, 0xDD, 0xDE, 0x32, 0x9B, 0x98, 0x9A, 0x00, 0x49,
		0xAB, 0x00, 0x6A, 0xAD, 0xD8, 0x0A, 0xAC, 0xE8, 0xE3, 0xFF, 0xC2, 0x82,
		0xD8, 0x94, 0xB5, 0x72, 0x5F, 0x2D, 0x72, 0xD5, 0xD9, 0x87, 0x43, 0xFC,
		0xF1, 0xA9, 0xC0, 0x2C, 0x60, 0xB2, 0xED, 0xBD, 0xEA, 0x7B, 0x03, 0x28,
		0xD8, 0xD3, 0x65, 0x5E, 0xD9, 0xB1, 0x82, 0xBE, 0x6C, 0x5B, 0x03, 0xB5,
		0xC8, 0x4B, 0x75, 0x34, 0x40, 0x4D, 0x9A, 0x65, 0xD6, 0xE6, 0x49, 0xDF,
		0x5A, 0x28, 0xF5, 0x2A, 0xEF, 0x35, 0x3C, 0xA5, 0x4A, 0x45, 0x30, 0x14,
		0xFB, 0x37, 0xAE, 0x8F, 0x97, 0xC1, 0x92, 0x9B, 0x01, 0x2B, 0x16, 0xEA,
		0x21, 0xA0, 0x1A, 0xDD, 0xDF, 0xC4, 0xBA, 0x05, 0xBC, 0xC7, 0x4E, 0x8F,
		0x9A, 0x50, 0xE4, 0x22, 0x58, 0x0D, 0xFB, 0xCB,
	}
	N = new(big.Int).SetBytes(dhparam)
	g = big.NewInt(2)
	k = calculateHashBigInt(g, N)
)

func calculateHash(salt []byte, payload []byte) []byte {
	mac := hmac.New(sha256.New, salt)
	mac.Write(payload)
	return mac.Sum(nil)
}

func calculateHashBigInt(salt *big.Int, payload *big.Int) *big.Int {
	return new(big.Int).SetBytes(calculateHash(salt.Bytes(), payload.Bytes()))
}

func cryptrand(length int) (*big.Int, error) {
	b := make([]byte, length)
	_, err := rand.Read(b)
	if err != nil {
		return nil, err
	}

	return new(big.Int).SetBytes(b), nil
}
